
#####################################################################
# 	RefillPlease - Filament Runout Sensor
#####################################################################

#[filament_motion_sensor filament_sensor]
#detection_length: 7.0
#extruder: extruder
#cause_on_runout: FALSE
#switch_pin: !PG13 # ESTOP5
#runout_gcode: M600


#####################################################################
# 	Macro
#####################################################################
#[gcode_macro SET_FILAMENT_SENSOR]
#description: Sets the filament sensor on/off and save value to file
#rename_existing: SET_FILAMENT_SENSOR_BASE
#gcode:
#  {% if printer.save_variables.variables.filament_sensor is not defined %}
#    {% set filament_sensor = {params.SENSOR|string: params.ENABLE|int} %}
#  {% else %}
#    {% set filament_sensor = printer.save_variables.variables.filament_sensor %}
#    {% set _dummy = filament_sensor.update({params.SENSOR|string: params.ENABLE|int}) %}
#  {% endif %}
#  SET_FILAMENT_SENSOR_BASE SENSOR={params.SENSOR} ENABLE={params.ENABLE}
#  SAVE_VARIABLE VARIABLE=filament_sensor VALUE="{filament_sensor}"

#[gcode_macro _RESTORE_FILAMENT_SENSOR]
#description: Restore the filament sensor on/off state at klipper start
#gcode:
#  {% if printer.save_variables.variables.filament_sensor is defined %}
#    {% for sensor in printer.save_variables.variables.filament_sensor %}
#       SET_FILAMENT_SENSOR_BASE SENSOR={sensor} ENABLE={printer.save_variables.variables.filament_sensor[sensor]}
#    {% endfor %}
#  {% endif %}
[gcode_macro M600]
gcode:
    FC_PAUSE
    _DISABLE_FS
    _SOUND_YES
    UNLOAD

[gcode_macro FC_PAUSE]
gcode:
    PAUSE
    SET_IDLE_TIMEOUT TIMEOUT={ 30 * 60 }

[gcode_macro FC_RESUME]
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    SET_IDLE_TIMEOUT TIMEOUT={ 10 * 60 }
    G1 E-{ E }
    # Reset extruder position
    G92 E0
    RESUME

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=UNLOAD_state
    {% set z_lift = params.z_lift|default(50)|int %}
    {% set axis_max = printer.toolhead.axis_maximum %}
    {% set pos = printer.toolhead.position %}

    {% set z_diff = axis_max.z - pos.z %}
    {% set z_safe_lift = [ z_lift, z_diff ] | min%}
    
    G91                   # relative positioning
    G0 Z{ z_safe_lift }
    # Reset extruder position
    G92 E0
    #G1 E5.0 F1200        # extrude a little
    G1 E-400 F{ 50 * 60 } # perform the unload
    G1 E-50 F{ 5 * 60 }   # finish the unload
    RESTORE_GCODE_STATE NAME=UNLOAD_state

[gcode_macro PURGE_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=PURGE_state
    G91                   # relative coords
    G1 E45.0 F{ 5 * 60 }  # purge
    RESTORE_GCODE_STATE NAME=PURGE_state

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOAD_state
    G91                   # Relative coords
    G1 E25.0 F{ 5 * 60 }  # extrude a little, slowly
    G1 E375 F{ 50 * 60 }  # extrude a lot more, quick
    G4 P{ 0.9 * 1000 }    # dwell (ms)
    G1 E45.0 F{ 5 * 60 }  # extrude a little more
    _ENABLE_FS
    RESTORE_GCODE_STATE NAME=LOAD_state

[gcode_macro _DISABLE_FS]
description: placeholder, disables filament sensor that might trigger an M600 in the middle of a load/unload/M600...
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _ENABLE_FS]
description: placeholder, enables filament sensor
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
